pipeline {
    agent {label 'aws-jenkins-1-label'}
    environment {
        IMAGE_NAME = 'mynodeblog'
        VERSION = '1.0.0'
        REGISTRY_NAME = 'dockerpresh'
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD')
    }

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Setup Docker (Install if Missing)') {
            steps {
                    sh '''
                        if ! command -v docker &> /dev/null
                        then
                            # run as sudo user
                            echo "Docker not found. Installing Docker..."
                            sudo yum update -y
                            sudo yum install docker -y
                            sudo service docker start
                            sudo usermod -aG docker $USER
                        else
                            echo "Docker is already installed."
                        fi
                    '''
            }
        }
        stage('Clean Up Existing Image') {
                script {
                    sh '''
                     docker rm -f $(docker ps -aqf"name=$IMAGE_NAME") 2&> /dev/null 
                    '''
                }
        }
        stage('Git checkout'){
            steps{
                git branch: 'main', credentialsId: 'git-credentials', url: 'https://github.com/mbataprecious/NodeBlog.git'
                sh 'ls -lrt'
            }
        }
        stage('list files'){
            steps{
                sh '''
                ls -lrt
                pwd
                who
                '''
            }
        }
        stage('build Docker Image') {
            steps {
                sh "docker build -t $IMAGE_NAME:$VERSION ."
            }
        }
        stage('Login to DockerHub') {
            steps {
                script {
                    sh "docker login -u $REGISTRY_NAME -p $DOCKER_PASSWORD"
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                sh "docker tag $IMAGE_NAME:$VERSION $REGISTRY_NAME/$IMAGE_NAME:$VERSION"
                sh "docker push $REGISTRY_NAME/$IMAGE_NAME:$VERSION"
            }
        }
    }
    post{
        always{
            echo "finished building"
        }
                success {
            echo 'pushed to repository successful.'
        }
        failure {
            echo 'Build or push failed.'
        }
    }
}